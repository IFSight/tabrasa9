<?php

/**
 * @file
 * Contains fulcrum_whitelist.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function fulcrum_whitelist_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the fulcrum_whitelist module.
    case 'help.page.fulcrum_whitelist':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Fulcrum Streamlined Whitelist (FSW) is intended for current clients using Interpersonal Frequency (I.F.) Fulcrum Drupal-as-a-Service websites and provides use and administration of controlled access to restricted areas of client sites. For more information please visit the <a href="/fulcrum/whitelist_docs">FSW docs</a>.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function fulcrum_whitelist_cron() {
  _fulcrum_whitelist_create_tokens();
}

/**
 * Implements hook_theme().
 */
function fulcrum_whitelist_theme() {
  return [
    'dechrome' => [
      'variables' => [
        'message' => NULL,
        'js'      => NULL,
      ],
    ],
    'javascript' => [
      'variables' => [
        'delay' => NULL,
        'redirect' => NULL,
      ],
    ],
    'docs' => [
      'variables' => [
        'docs_intro' => NULL,
        'docs_user' => NULL,
        'docs_admin' => NULL,
      ],
    ],
  ];
}

/**
 * Make the whitelist tokens.
 */
function _fulcrum_whitelist_create_tokens() {

  $config = \Drupal::config('fulcrum_whitelist.fulcrumwhitelistconfig');
  $database = \Drupal::database();

  // Get a list of users lacking tokens.
  $query = $database->select('users_field_data', 'u');
  $query->leftJoin('fulcrum_whitelist_entity__field_user', 'w', 'u.uid = w.field_user_target_id');
  $query
    ->fields('u', ['uid', 'mail'])
    ->condition('u.status', '1')
    ->isNull('w.entity_id')
    ->range(0, $config->get('token_process_limit', 50))
    ->addTag('fulcrum_whitelist');
  $count = $query->countQuery()->execute()->fetchField();

  // \Drupal::logger('fulcrum_whitelist')->notice('Select __toString: ' . $query->__toString());
  // \Drupal::logger('fulcrum_whitelist')->notice('Select count: ' . $count);

  if (!empty($count)) {

    $accounts = $query->execute()->fetchAll();

    foreach ($accounts as $account) {
      $token = user_password(50);

      $fulcrum_whitelist = \Drupal::entityTypeManager()
        ->getStorage('fulcrum_whitelist_entity')
        ->create([
          'name' => $token,
          'type' => 'fulcrum_whitelist_entity',
          'field_user' => ['target_id' => $account->uid],
        ])
        ->save();

      // Log a notice.
      \Drupal::logger('fulcrum_whitelist')
        ->notice(t('Created token for @mail', ['@mail' => $account->mail]));
    }
  }
  else {
    // Log a notice.
    \Drupal::logger('fulcrum_whitelist')
      ->notice(t('No users found needing tokens.'));
  }
}
